package com.example.restapi.implement.security;


import com.example.restapi.domain.product.Product;
import com.example.restapi.implement.exception.BlogAPIException;
import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.SignatureException;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpStatus;
import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Component;

import java.util.Date;


/**
 * @brief: This Class is class about JWT token .
 *
 * @description generateToken
 *
 * @Auther RYA234
 *
 * @TestCode: {@link  Product}
 */
@Component
public class JwtTokenProvider {

    @Value("${app.jwt-secret}")
    private String jwtSecret;

    @Value("${app.jwt-expiration-milliseconds}")
    private int jwtExpirationInMs;


    /**
     * @brief: generate token as String.
     * @description When customer login success,JWT token is generated by this method.
     * Usage of this method is expected by signin in {@link com.example.restapi.implement.customer.CustomerRestController}
     */
    public String generateToken(Authentication authentication){
        String customername = authentication.getName();
        Date currentDate = new Date();
        Date expireDate = new Date(currentDate.getTime() + jwtExpirationInMs);

        return Jwts.builder()
                .setSubject(customername)
                .setIssuedAt(new Date())
                .setExpiration(expireDate)
                .signWith(SignatureAlgorithm.HS512,jwtSecret)
                .compact();
    }

    /**
     * @brief: get username from the token.
     * @description // Todo Descriptionを書く
     *              This method is expected by doFilterInternal in {@link JwtAuthenticationFilter}
     */
    public String getCustomernameFromJWT(String token){
        Claims claims = Jwts.parser()
                .setSigningKey(jwtSecret)
                .parseClaimsJws(token)
                .getBody();
        return claims.getSubject();
    }

    /**
     * @brief: Validate JWT token.
     * @description // Todo Descriptionを書く
     *              Usage of this method is expected by doFilterInternal in {@link JwtAuthenticationFilter}
     */
    public boolean validateToken(String token){
        try {
            Jwts.parser().setSigningKey(jwtSecret).parseClaimsJws(token);
            return true;
        }catch (SignatureException ex){
                throw  new BlogAPIException(HttpStatus.BAD_REQUEST, "invalid JWT signature");
            }
        }

}
